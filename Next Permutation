
class Solution {
  public:
    void nextPermutation(vector<int>& arr) 
    {
        // code here
        int idx = -1;
        int n = arr.size();
        // 1 find breakpoint
        for(int i = n-2;i >=0;i--)
        {
            if(arr[i] < arr[i+1])
            {
                idx = i;
                break;
            }
        }
        if(idx == -1)
        {
            // last permutation is input
            reverse(arr.begin(),arr.end());
            return;
        }
        // find first element greater that breakpoint but the smallest from rem
        for(int i = n - 1; i > idx; i--)
    {
        if(arr[i] > arr[idx])
        {
            swap(arr[i], arr[idx]); // Swap to form the next permutation
            break;
        }
    }
        // place remaining elements in sorted array
        reverse(arr.begin()+idx+1 , arr.end());
        
        }
};
